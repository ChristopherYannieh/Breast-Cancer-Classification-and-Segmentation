# -*- coding: utf-8 -*-
"""Breast Cancer Classification Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B1eraMpE5z5T8XOtsUPq4B_AVAbFzz9V

##Getting the Data
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/My Drive/ZAKA AI/Artificial Intelligence Program/Capstone Project/

"""##Importing the Libraries"""

import cv2
import os
import re
import random
import numpy as np
import matplotlib.pyplot as plt

def import_images(folder,target):
    images = []
    image_count = 0
    for file_name in os.listdir(folder):
      if image_count >= 300:
        break
      if not (re.search('_mask.png', file_name) or re.search('_mask_1.png', file_name) or re.search('_mask_2.png', file_name)):
        img = cv2.imread(os.path.join(folder, file_name),0)
        if img is not None:
            images.append([img,target])
            image_count += 1
    while image_count < 300: 
      list_length = len(images)
      images.append(images[random.randint(0, list_length - 1)])
      image_count += 1
    return images, image_count

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/My Drive/ZAKA AI/Artificial Intelligence Program/Capstone Project/breast-cancer-dataset

normal_directory = "/content/drive/My Drive/ZAKA AI/Artificial Intelligence Program/Capstone Project/breast-cancer-dataset/normal/"
benign_directory = "/content/drive/My Drive/ZAKA AI/Artificial Intelligence Program/Capstone Project/breast-cancer-dataset/benign/"
malignant_directory = "/content/drive/My Drive/ZAKA AI/Artificial Intelligence Program/Capstone Project/breast-cancer-dataset/malignant"

normal, normal_count = import_images(normal_directory, 0)
benign, benign_count = import_images(benign_directory, 1)
malignant, malignant_count = import_images(malignant_directory, 2)

print(f'Normal images: {normal_count}')
print(f'Benign images: {benign_count}')
print(f'Malignant images: {malignant_count}')

data = []
data.extend(normal)
data.extend(benign)
data.extend(malignant)

plt.imshow(data[400][0])

feature_matrix = []
labels = []
for x, y in data:
    feature_matrix.append(x)
    labels.append(y)

feature_matrix[100]

labels[100]

X = []
IMG_SIZE = 256

for img in feature_matrix:
    image = cv2.resize(img, (IMG_SIZE , IMG_SIZE))
    image = image/255.0
    X.append(image)
    
plt.imshow(X[100])

X = np.array(X)

print(X.shape)

X = X.reshape(X.shape[0], X.shape[1], X.shape[2], 1)

print(X.shape)

"""# Train-Test Split"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, labels)

print("X_train size: ", X_train.shape)
print("X_test Size: ", X_test.shape)

"""# Model"""

import sys
import keras
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout, BatchNormalization
from tensorflow.keras.optimizers import Adam

# Best model so far
def define_model(x=128):
    model = Sequential()
    model.add(Conv2D(x, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same', input_shape=(256, 256,1)))
    model.add(MaxPooling2D())
    model.add(Conv2D(x/2, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))
    model.add(Conv2D(x/2, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))
    model.add(MaxPooling2D())
    model.add(Conv2D(x/4, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))
    model.add(Conv2D(x/4, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))
    model.add(Conv2D(x/4, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))
    model.add(Conv2D(x/4, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))
    model.add(MaxPooling2D())
    model.add(Flatten())
    model.add(Dense(x*2, activation='relu'))
    model.add(Dense(x, activation='relu'))
    model.add(Dense(x/2, activation='relu'))
    model.add(Dense(x/2, activation='relu'))
    model.add(Dense(x/2, activation='relu'))
    model.add(Dense(x/4, activation='relu'))
    model.add(Dense(3, activation='softmax'))
    # compile model
    opt = Adam(lr=0.001)
    model.compile(optimizer=opt, loss='sparse_categorical_crossentropy', metrics=['accuracy'])
    return model

"""# Training

"""

model = define_model()
model.summary()

history = model.fit(np.array(X_train), np.array(y_train), validation_data=(X_test, np.array(y_test)), epochs=20)

print(history.history.keys())
# summarize history for accuracy
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

# summarize history for loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

"""# Testing

"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/ZAKA AI/Artificial Intelligence Program/Capstone Project/

model.save_weights('breast-cancer-classification.h5')
model.save('BCC_CNN.model')

from tensorflow.keras.models import load_model
model = load_model('BCC_CNN.model')

model.evaluate(np.array(X_test), np.array(y_test))

from sklearn.metrics import confusion_matrix
import seaborn as sns

predicted = []
for item in model.predict(X_test):
    predicted.append(np.argmax(item))

conf = confusion_matrix(y_test,predicted)
conf

info = [
    'normal'   ,  # 0
    'benign'   ,  # 1
    'malignant',  # 2
]

plt.figure(figsize = (6,6))
ax = sns.heatmap(conf, cmap=plt.cm.Greens, annot=True, square=True, xticklabels = info, yticklabels = info)
ax.set_ylabel('Actual', fontsize=30)
ax.set_xlabel('Predicted', fontsize=30)

def image_prediction(img):
    CLASSES = ['Normal', 'Benign', 'Malignant']
    
    img1 = img.reshape(1, 256, 256, 1)
    prediction = np.argmax(model.predict(img1))

    predicted_class = CLASSES[np.argmax(prediction)]
    return predicted_class

image_prediction(X_test[7])

image_prediction(X_test[72])

"""# Prepare for Deployment"""

def new_prediction(img):
    IMG_SIZE = 256
    img_array = cv2.imread(img, cv2.IMREAD_GRAYSCALE)
    new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))
    return new_array.reshape(1, IMG_SIZE, IMG_SIZE, 1)

import cv2
import numpy as np
from tensorflow.keras.models import load_model

def getPrediction(filepath):
  CLASSES = ['Normal', 'Benign', 'Malignant']

  classification_model = load_model("BCC_CNN.model")
  unet_model = load_model("U-NetModel.h5")

  # Prepare image for classification
  IMG_SIZE = 256
  img_array = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)
  new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))
  img = new_array.reshape(-1, IMG_SIZE, IMG_SIZE, 1)

  prediction = classification_model.predict(img)
  predicted_class = CLASSES[np.argmax(prediction)]

  # Prepare image for segmentation

  print("Diagnosis is: ", predicted_class)
  return predicted_class

import numpy as np
from PIL import Image
from tensorflow.keras.models import load_model

def getPrediction(filename):
    # Load Models
    classification_model = load_model("BCC_CNN.model")
    unet_model = load_model("U-NetModel.h5")

    # Define variables
    CLASSES = ['Normal', 'Benign', 'Malignant']
    IMG_SIZE = 256

    # Prepare image for classification
    img = np.asarray(Image.open(filename).resize((IMG_SIZE, IMG_SIZE)).convert("L"))
    img = np.expand_dims(img, axis=0)
    img = img/255.0

    prediction = classification_model.predict(img)
    predicted_class = CLASSES[np.argmax(prediction)]

    # Prepare image for segmentation
    img2 = np.asarray(Image.open(filename).resize((IMG_SIZE, IMG_SIZE)))
    img2 = np.expand_dims(img2, axis=0)
    img2 = img2/255.0
    prediction_mask = unet_model.predict(img2)

    # Reshape images
    img2 = img2.reshape(256,256,3)
    prediction_mask = prediction_mask.reshape(256,256,1)
    return predicted_class, img2, prediction_mask

path = '/content/drive/My Drive/ZAKA AI/Artificial Intelligence Program/Capstone Project/breast-cancer-dataset/' 
img_path = 'benign/benign (72).png'
full_path = path + img_path

predicted_class, img, prediction_mask = getPrediction(full_path)

def plot_prediction(image, prediction_mask):
  plt.figure(figsize=(6,6))
  
  plt.subplot(1,2,1)
  plt.imshow(image)
  plt.title('Actual Image')
  
  plt.subplot(1,2,2)
  plt.imshow(prediction_mask[:,:,0])
  plt.title('Predicted Mask')

print(predicted_class)
plot_prediction(img, prediction_mask)